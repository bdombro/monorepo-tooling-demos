diff --git a/dist/index.js b/dist/index.js
index f10d82c024e5acbb3edaa8b532cdac2e02c48943..3ec9b17cc7af86e79b18ce020b598b10f11b6a2e 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -5129,19 +5129,54 @@ var require_src = __commonJS({
           // Use `npm install --global-style` for leaves when hoisting is enabled
           npmGlobalStyle: !!this.options.hoist
         });
+        
+        const isV1 = (leafNode) => {
+          let isV1 = false;
+          try {
+            isV1 = require('fs').readFileSync(leafNode.location + '/.yarnrc.yml', 'utf8').includes('yarn-1');
+          } catch(e) {}
+          return isV1
+        }
+        
+        let v4s = [];
         leaves.forEach((leafRecord, leafNode) => {
-          const deps = Array.from(leafRecord);
-          if (deps.some(({ isSatisfied }) => !isSatisfied)) {
-            actions.push(() => {
-              const dependencies = deps.map(({ dependency }) => dependency);
-              const promise = npmInstallDependencies(leafNode.pkg, dependencies, leafNpmConfig);
-              return pulseTillDone(promise).then(() => {
-                tracker.verbose("installed leaf", leafNode.name);
-                tracker.completeWork(1);
+          if (isV1(leafNode)) {
+            const deps = Array.from(leafRecord);
+            if (deps.some(({ isSatisfied }) => !isSatisfied)) {
+              actions.push(() => {
+                const dependencies = deps.map(({ dependency }) => dependency);
+                const promise = npmInstallDependencies(leafNode.pkg, dependencies, leafNpmConfig);
+                return pulseTillDone(promise).then(() => {
+                  tracker.verbose("installed leaf", leafNode.name);
+                  tracker.completeWork(1);
+                });
               });
-            });
+            }
+          } else {
+            v4s.push(leafNode)
           }
         });
+
+        if (v4s.length) {
+          actions.push(() => {
+            const v4Names = v4s.map(l => l.name);
+            const args = ['workspaces', 'focus', 'root', ...v4Names];
+            tracker.verbose("npmInstall", ['yarn', args]);
+            let promise = Promise.resolve();
+            try {
+              promise = childProcess8.exec('yarn', args, {
+                cwd: v4s[0].pkg.rootPath,
+              })
+            } catch(e) {
+              tracker.error(e)
+            }
+            return pulseTillDone(promise).then(() => {
+              tracker.verbose("installed ws leafs ", v4Names.join(','));
+              tracker.completeWork(1);
+            });
+          });
+        }
+
         if (actions.length) {
           tracker.info("", "Installing external dependencies");
           tracker.verbose("actions", "%d actions, concurrency %d", actions.length, this.concurrency);
